<%- include('../partials/head') %>
    <title>Achieva - Dashboard</title>
    <link rel="stylesheet" href="/css/dashboard.css">
    </head>

    <body>
        <!-- Floating code elements in background -->
        <div class="floating-code-element" style="top: 10%; left: 5%;">function solve() {</div>
        <div class="floating-code-element" style="top: 15%; left: 15%;">return result;</div>
        <div class="floating-code-element" style="top: 20%; left: 25%;">}</div>
        <div class="floating-code-element" style="top: 30%; left: 75%;">class Solution {</div>
        <div class="floating-code-element" style="top: 35%; left: 65%;">public static void main()</div>
        <div class="floating-code-element" style="top: 40%; left: 55%;">}</div>
        <div class="floating-code-element" style="top: 60%; left: 20%;">def calculate():</div>
        <div class="floating-code-element" style="top: 65%; left: 30%;">pass</div>

        <header>
            <div class="logo">
                <div class="logo-icon">
                    <i class="fas fa-code"></i>
                </div>
                <div class="logo-text">Achieva</div>
            </div>

            <div class="user-profile">
                <div class="user-avatar">
                    <span>MOA</span>
                </div>
                <div class="user-dropdown">
                    <a href="/profile" class="dropdown-item">
                        <i class="fas fa-user"></i> Profile
                    </a>
                    <a href="#" class="dropdown-item">
                        <i class="fas fa-cog"></i> Settings
                    </a>
                    <div class="dropdown-divider"></div>
                    <a href="/login" class="dropdown-item">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </a>
                </div>
            </div>
        </header>

        <nav class="sidebar">
            <ul class="sidebar-nav">
                <li class="sidebar-item active">
                    <div class="sidebar-icon">
                        <i class="fas fa-tachometer-alt"></i>
                    </div>
                    <div class="sidebar-text">Dashboard</div>
                </li>
                <li class="sidebar-item">
                    <div class="sidebar-icon">
                        <i class="fas fa-project-diagram"></i>
                    </div>
                    <div class="sidebar-text"><a href="/project"
                            style="text-decoration: none; color: white;">Projects</a></div>
                </li>
                <li class="sidebar-item">
                    <div class="sidebar-icon">
                        <i class="fas fa-code"></i>
                    </div>
                    <div class="sidebar-text">Practice</div>
                </li>
                <li class="sidebar-item">
                    <div class="sidebar-icon">
                        <i class="fas fa-chart-line"></i>
                    </div>
                    <div class="sidebar-text"><a href="/progress"
                            style="text-decoration: none; color: white;">Progress</a></div>
                </li>
                <li class="sidebar-item">
                    <div class="sidebar-icon">
                        <i class="fas fa-trophy"></i>
                    </div>
                    <div class="sidebar-text">Achievements</div>
                </li>
                <li class="sidebar-item">
                    <div class="sidebar-icon">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="sidebar-text">Community</div>
                </li>
                <li class="sidebar-item">
                    <div class="sidebar-icon">
                        <i class="fas fa-book"></i>
                    </div>
                    <div class="sidebar-text"><a href="/resources"
                            style="text-decoration: none; color: white;">Resources</a></div>
                </li>
                <li class="sidebar-item">
                    <div class="sidebar-icon">
                        <i class="fas fa-cog"></i>
                    </div>
                    <div class="sidebar-text">Settings</div>
                </li>
            </ul>
        </nav>

        <main>
            <div class="dashboard-header fade-in">
                <div>
                    <h1 class="dashboard-title">Your Coding Journey</h1>
                    <p class="dashboard-subtitle">Track your progress, solve problems, and level up your skills</p>
                </div>
                <button class="action-button fade-in delay-1" onclick="openCompiler()">
                    <i class="fas fa-play"></i> Practice Now
                </button>
            </div>

            <div class="stats-container">
                <div class="stat-card fade-in delay-1">
                    <div class="stat-title">Problems Solved</div>
                    <div class="stat-value">143</div>
                    <div class="stat-change positive">
                        <i class="fas fa-arrow-up"></i> 75% from last month
                    </div>
                </div>
                <div class="stat-card fade-in delay-2">
                    <div class="stat-title">Current Streak</div>
                    <div class="stat-value">18 days</div>
                    <div class="stat-change positive">
                        <i class="fas fa-fire"></i> Keep it up!
                    </div>
                </div>
                <div class="stat-card fade-in delay-3">
                    <div class="stat-title">Skill Level</div>
                    <div class="stat-value">Advanced</div>
                    <div class="stat-change positive">
                        <i class="fas fa-star"></i> Top 15%
                    </div>
                </div>
                <div class="stat-card fade-in delay-4">
                    <div class="stat-title">Next Milestone</div>
                    <div class="stat-value">150 Problems</div>
                    <div class="stat-change positive">
                        <i class="fas fa-trophy"></i> 23 to go
                    </div>
                </div>
            </div>

            <div class="charts-container">
                <div class="chart-card fade-in delay-2">
                    <div class="chart-header">
                        <h3 class="chart-title">Problem Solving Trend</h3>
                        <div class="chart-legend">
                            <div class="legend-item">
                                <div class="legend-color" style="background-color: #6366f1;"></div>
                                <span>Solved</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-color" style="background-color: #10b981;"></div>
                                <span>Easy</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-color" style="background-color: #f59e0b;"></div>
                                <span>Medium</span>
                            </div>
                        </div>
                    </div>
                    <canvas id="problemsChart" height="300"></canvas>
                </div>

                <div class="chart-card fade-in delay-3">
                    <div class="chart-header">
                        <h3 class="chart-title">Skill Radar</h3>
                        <div class="chart-legend">
                            <div class="legend-item">
                                <div class="legend-color" style="background-color: #6366f1;"></div>
                                <span>You</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-color" style="background-color: #10b981;"></div>
                                <span>Average</span>
                            </div>
                        </div>
                    </div>
                    <div class="radar-container">
                        <canvas id="radarChart" height="300"></canvas>
                        <div class="radar-center-text">
                            <div class="radar-center-value">87%</div>
                            <div class="radar-center-label">Overall</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="practice-container fade-in delay-4">
                <div class="practice-header">
                    <h2 class="practice-title">Recommended Problems</h2>
                    <button class="action-button" onclick="openCompiler()">
                        <i class="fas fa-plus"></i> View All
                    </button>
                </div>
                <div class="problem-cards">
                    <div class="problem-card" onclick="openCompiler('Two Sum')">
                        <div class="problem-difficulty easy">Easy</div>
                        <h3 class="problem-title">Two Sum</h3>
                        <p class="problem-description">
                            Given an array of integers nums and an integer target, return indices of the two numbers
                            such that they add up to target.
                        </p>
                        <div class="problem-meta">
                            <div class="problem-solved">
                                <i class="fas fa-check-circle"></i> 85% solved
                            </div>
                            <div class="problem-points">10 pts</div>
                        </div>
                    </div>

                    <div class="problem-card" onclick="openCompiler('Reverse Linked List')">
                        <div class="problem-difficulty medium">Medium</div>
                        <h3 class="problem-title">Reverse Linked List</h3>
                        <p class="problem-description">
                            Given the head of a singly linked list, reverse the list and return the reversed list.
                        </p>
                        <div class="problem-meta">
                            <div class="problem-solved">
                                <i class="fas fa-check-circle"></i> 72% solved
                            </div>
                            <div class="problem-points">20 pts</div>
                        </div>
                    </div>

                    <div class="problem-card" onclick="openCompiler('Binary Tree Inorder Traversal')">
                        <div class="problem-difficulty easy">Easy</div>
                        <h3 class="problem-title">Binary Tree Inorder Traversal</h3>
                        <p class="problem-description">
                            Given the root of a binary tree, return the inorder traversal of its nodes' values.
                        </p>
                        <div class="problem-meta">
                            <div class="problem-solved">
                                <i class="fas fa-check-circle"></i> 78% solved
                            </div>
                            <div class="problem-points">15 pts</div>
                        </div>
                    </div>
                </div>
            </div>
        </main>

        <!-- Compiler Modal -->
        <div class="compiler-modal" id="compilerModal">
            <div class="compiler-content">
                <div class="compiler-header">
                    <h3 class="compiler-title" id="compilerProblemTitle">Two Sum</h3>
                    <button class="close-compiler" onclick="closeCompiler()">&times;</button>
                </div>
                <div class="compiler-body">
                    <div class="code-editor">
                        <div class="editor-toolbar">
                            <select class="language-selector" id="languageSelector">
                                <option value="cpp">C++</option>
                                <option value="java">Java</option>
                                <option value="python" selected>Python</option>
                                <option value="javascript">JavaScript</option>
                            </select>
                            <div class="editor-actions">
                                <button class="editor-btn">
                                    <i class="fas fa-copy"></i> Copy
                                </button>
                                <button class="editor-btn">
                                    <i class="fas fa-redo"></i> Reset
                                </button>
                            </div>
                        </div>
                        <div class="editor-container">
                            <textarea id="code-editor" spellcheck="false"># Write your code here
def two_sum(nums, target):
    pass</textarea>
                        </div>
                    </div>
                    <div class="problem-info">
                        <div class="problem-statement">
                            <h3>Problem Statement</h3>
                            <p>
                                Given an array of integers <code>nums</code> and an integer <code>target</code>, return
                                indices of the two numbers such that they add up to <code>target</code>.
                            </p>
                            <p>
                                You may assume that each input would have exactly one solution, and you may not use the
                                same element twice.
                            </p>
                            <p>
                                You can return the answer in any order.
                            </p>

                            <h3>Example 1:</h3>
                            <p>
                                <strong>Input:</strong> nums = [2,7,11,15], target = 9<br>
                                <strong>Output:</strong> [0,1]<br>
                                <strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].
                            </p>

                            <h3>Constraints:</h3>
                            <ul>
                                <li>2 <= nums.length <=10<sup>4</sup></li>
                                <li>-10<sup>9</sup>
                                    <= nums[i] <=10<sup>9</sup>
                                </li>
                                <li>-10<sup>9</sup>
                                    <= target <=10<sup>9</sup>
                                </li>
                                <li>Only one valid answer exists.</li>
                            </ul>
                        </div>

                        <div class="test-cases">
                            <h3>Test Cases</h3>

                            <div class="test-case">
                                <div class="test-case-header">
                                    <div class="test-case-title">Case 1</div>
                                    <div class="test-case-status pending">Pending</div>
                                </div>
                                <div class="test-case-content">
                                    <div>
                                        <div class="test-case-label">Input</div>
                                        <div class="test-case-input">
                                            <pre>nums = [2,7,11,15]
target = 9</pre>
                                        </div>
                                    </div>
                                    <div>
                                        <div class="test-case-label">Expected Output</div>
                                        <div class="test-case-output">
                                            <pre>[0, 1]</pre>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="test-case">
                                <div class="test-case-header">
                                    <div class="test-case-title">Case 2</div>
                                    <div class="test-case-status pending">Pending</div>
                                </div>
                                <div class="test-case-content">
                                    <div>
                                        <div class="test-case-label">Input</div>
                                        <div class="test-case-input">
                                            <pre>nums = [3,2,4]
target = 6</pre>
                                        </div>
                                    </div>
                                    <div>
                                        <div class="test-case-label">Expected Output</div>
                                        <div class="test-case-output">
                                            <pre>[1, 2]</pre>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="compiler-footer">
                    <div class="compiler-result">
                        <i class="fas fa-circle-notch fa-spin result-icon"></i>
                        <span class="result-text">Ready to run code</span>
                    </div>
                    <div class="compiler-actions">
                        <button class="run-btn" onclick="runCode()">
                            <i class="fas fa-play"></i> Run Code
                        </button>
                        <button class="submit-btn" onclick="submitCode()">
                            <i class="fas fa-paper-plane"></i> Submit
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <script>
            // Initialize charts
            document.addEventListener('DOMContentLoaded', function () {
                // Problems solved chart
                const problemsCtx = document.getElementById('problemsChart').getContext('2d');
                const problemsChart = new Chart(problemsCtx, {
                    type: 'line',
                    data: {
                        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
                        datasets: [
                            {
                                label: 'Total Solved',
                                data: [12, 19, 15, 27, 34, 42, 49],
                                borderColor: '#6366f1',
                                backgroundColor: 'rgba(99, 102, 241, 0.1)',
                                tension: 0.3,
                                fill: true
                            },
                            {
                                label: 'Easy',
                                data: [8, 12, 10, 15, 20, 25, 30],
                                borderColor: '#10b981',
                                backgroundColor: 'rgba(16, 185, 129, 0.1)',
                                tension: 0.3,
                                fill: true
                            },
                            {
                                label: 'Medium',
                                data: [4, 7, 5, 12, 14, 17, 19],
                                borderColor: '#f59e0b',
                                backgroundColor: 'rgba(245, 158, 11, 0.1)',
                                tension: 0.3,
                                fill: true
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                mode: 'index',
                                intersect: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                grid: {
                                    color: 'rgba(255, 255, 255, 0.1)'
                                },
                                ticks: {
                                    color: 'rgba(255, 255, 255, 0.7)'
                                }
                            },
                            x: {
                                grid: {
                                    color: 'rgba(255, 255, 255, 0.1)'
                                },
                                ticks: {
                                    color: 'rgba(255, 255, 255, 0.7)'
                                }
                            }
                        },
                        elements: {
                            point: {
                                radius: 4,
                                hoverRadius: 6
                            }
                        }
                    }
                });

                // Radar chart
                const radarCtx = document.getElementById('radarChart').getContext('2d');
                const radarChart = new Chart(radarCtx, {
                    type: 'radar',
                    data: {
                        labels: ['Data Structures', 'Algorithms', 'Problem Solving', 'Language Proficiency', 'System Design', 'Debugging'],
                        datasets: [
                            {
                                label: 'Your Skills',
                                data: [85, 80, 90, 95, 75, 85],
                                backgroundColor: 'rgba(99, 102, 241, 0.2)',
                                borderColor: '#6366f1',
                                borderWidth: 2,
                                pointBackgroundColor: '#6366f1',
                                pointBorderColor: '#fff',
                                pointHoverRadius: 5
                            },
                            {
                                label: 'Average',
                                data: [65, 60, 70, 75, 55, 65],
                                backgroundColor: 'rgba(16, 185, 129, 0.2)',
                                borderColor: '#10b981',
                                borderWidth: 2,
                                pointBackgroundColor: '#10b981',
                                pointBorderColor: '#fff',
                                pointHoverRadius: 5
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            r: {
                                angleLines: {
                                    color: 'rgba(255, 255, 255, 0.1)'
                                },
                                grid: {
                                    color: 'rgba(255, 255, 255, 0.1)'
                                },
                                pointLabels: {
                                    color: 'rgba(255, 255, 255, 0.7)'
                                },
                                ticks: {
                                    display: false,
                                    beginAtZero: true
                                }
                            }
                        }
                    }
                });

                // Add floating code elements dynamically
                const codeSnippets = [
                    "function binarySearch(arr, target) {",
                    "  let left = 0, right = arr.length - 1;",
                    "  while (left <= right) {",
                    "    const mid = Math.floor((left + right) / 2);",
                    "    if (arr[mid] === target) return mid;",
                    "    if (arr[mid] < target) left = mid + 1;",
                    "    else right = mid - 1;",
                    "  }",
                    "  return -1;",
                    "}",
                    "class TreeNode {",
                    "  constructor(val) {",
                    "    this.val = val;",
                    "    this.left = null;",
                    "    this.right = null;",
                    "  }",
                    "}",
                    "def quick_sort(arr):",
                    "    if len(arr) <= 1:",
                    "        return arr",
                    "    pivot = arr[len(arr) // 2]",
                    "    left = [x for x in arr if x < pivot]",
                    "    middle = [x for x in arr if x == pivot]",
                    "    right = [x for x in arr if x > pivot]",
                    "    return quick_sort(left) + middle + quick_sort(right)"
                ];

                const container = document.body;
                for (let i = 0; i < 15; i++) {
                    const snippet = codeSnippets[Math.floor(Math.random() * codeSnippets.length)];
                    const element = document.createElement('div');
                    element.className = 'floating-code-element';
                    element.textContent = snippet;
                    element.style.top = `${Math.random() * 80 + 10}%`;
                    element.style.left = `${Math.random() * 80 + 10}%`;
                    element.style.opacity = Math.random() * 0.1 + 0.05;
                    element.style.fontSize = `${Math.random() * 0.4 + 0.6}rem`;
                    container.appendChild(element);
                }
            });

            // Compiler modal functions
            function openCompiler(problemTitle) {
                if (problemTitle) {
                    document.getElementById('compilerProblemTitle').textContent = problemTitle;
                }
                document.getElementById('compilerModal').style.display = 'block';
                setTimeout(() => {
                    document.querySelector('.compiler-content').style.transform = 'translateY(0)';
                    document.querySelector('.compiler-content').style.opacity = '1';
                }, 10);
            }

            function closeCompiler() {
                document.querySelector('.compiler-content').style.transform = 'translateY(-20px)';
                document.querySelector('.compiler-content').style.opacity = '0';
                setTimeout(() => {
                    document.getElementById('compilerModal').style.display = 'none';
                }, 300);
            }

            function runCode() {
                const testCases = document.querySelectorAll('.test-case-status');
                const resultDiv = document.querySelector('.compiler-result');
                const resultIcon = resultDiv.querySelector('.result-icon');
                const resultText = resultDiv.querySelector('.result-text');

                // Show loading state
                resultIcon.className = 'fas fa-circle-notch fa-spin result-icon';
                resultText.textContent = 'Running code...';

                // Simulate API call
                setTimeout(() => {
                    // Randomly pass/fail test cases for demo
                    testCases.forEach((testCase, index) => {
                        setTimeout(() => {
                            if (Math.random() > 0.3) {
                                testCase.textContent = 'Passed';
                                testCase.className = 'test-case-status passed';
                            } else {
                                testCase.textContent = 'Failed';
                                testCase.className = 'test-case-status failed';
                            }
                        }, index * 500);
                    });

                    // Show final result
                    setTimeout(() => {
                        const passedCount = document.querySelectorAll('.test-case-status.passed').length;
                        const totalCount = testCases.length;

                        if (passedCount === totalCount) {
                            resultIcon.className = 'fas fa-check-circle result-icon success';
                            resultText.textContent = `All test cases passed (${passedCount}/${totalCount})`;
                        } else {
                            resultIcon.className = 'fas fa-times-circle result-icon error';
                            resultText.textContent = `${passedCount} of ${totalCount} test cases passed`;
                        }
                    }, testCases.length * 500 + 500);
                }, 1500);
            }

            function submitCode() {
                const resultDiv = document.querySelector('.compiler-result');
                const resultIcon = resultDiv.querySelector('.result-icon');
                const resultText = resultDiv.querySelector('.result-text');

                // Show loading state
                resultIcon.className = 'fas fa-circle-notch fa-spin result-icon';
                resultText.textContent = 'Submitting code...';

                // Simulate API call
                setTimeout(() => {
                    if (Math.random() > 0.2) {
                        resultIcon.className = 'fas fa-check-circle result-icon success';
                        resultText.textContent = 'Solution accepted! +15 points';

                        // Update charts (in a real app, this would be done via API)
                        const problemsChart = Chart.getChart('problemsChart');
                        problemsChart.data.datasets[0].data[6] += 1;
                        problemsChart.update();
                    } else {
                        resultIcon.className = 'fas fa-times-circle result-icon error';
                        resultText.textContent = 'Submission failed: Time Limit Exceeded';
                    }
                }, 2000);
            }

            // Close modal when clicking outside
            window.onclick = function (event) {
                if (event.target.classList.contains('compiler-modal')) {
                    closeCompiler();
                }
            }

            // Language selector change
            document.getElementById('languageSelector').addEventListener('change', function () {
                const language = this.value;
                const editor = document.getElementById('code-editor');

                switch (language) {
                    case 'cpp':
                        editor.value = `#include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;

vector<int> twoSum(vector<int>& nums, int target) {
    unordered_map<int, int> numMap;
    for (int i = 0; i < nums.size(); i++) {
        int complement = target - nums[i];
        if (numMap.count(complement)) {
            return {numMap[complement], i};
        }
        numMap[nums[i]] = i;
    }
    return {};
}

int main() {
    vector<int> nums = {2, 7, 11, 15};
    int target = 9;
    vector<int> result = twoSum(nums, target);
    for (int num : result) {
        cout << num << " ";
    }
    return 0;
}`;
                        break;
                    case 'java':
                        editor.value = `import java.util.HashMap;
import java.util.Map;

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> numMap = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (numMap.containsKey(complement)) {
                return new int[] {numMap.get(complement), i};
            }
            numMap.put(nums[i], i);
        }
        return new int[0];
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums = {2, 7, 11, 15};
        int target = 9;
        int[] result = solution.twoSum(nums, target);
        for (int num : result) {
            System.out.print(num + " ");
        }
    }
}`;
                        break;
                    case 'python':
                        editor.value = `def two_sum(nums, target):
    num_map = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in num_map:
            return [num_map[complement], i]
        num_map[num] = i
    return []

# Example usage
nums = [2, 7, 11, 15]
target = 9
print(two_sum(nums, target))`;
                        break;
                    case 'javascript':
                        editor.value = `function twoSum(nums, target) {
    const numMap = {};
    for (let i = 0; i < nums.length; i++) {
        const complement = target - nums[i];
        if (complement in numMap) {
            return [numMap[complement], i];
        }
        numMap[nums[i]] = i;
    }
    return [];
}

// Example usage
const nums = [2, 7, 11, 15];
const target = 9;
console.log(twoSum(nums, target));`;
                        break;
                }
            });

            // Sidebar active item
            const sidebarItems = document.querySelectorAll('.sidebar-item');
            sidebarItems.forEach(item => {
                item.addEventListener('click', () => {
                    sidebarItems.forEach(i => i.classList.remove('active'));
                    item.classList.add('active');

                    // In a real app, this would load the appropriate content
                    if (item.querySelector('.sidebar-text').textContent === 'Practice') {
                        openCompiler();
                    }
                });
            });
        </script>
    </body>

    </html>